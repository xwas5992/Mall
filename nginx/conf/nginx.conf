user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 工作连接数
events {
    worker_connections 10240;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';

    access_log /var/log/nginx/access.log main;

    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # GZIP压缩
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=order_cache:10m max_size=10g inactive=60m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;
    proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    proxy_cache_bypass $http_pragma;
    proxy_cache_revalidate on;

    # 上游服务器配置
    upstream order_service {
        # 负载均衡算法：ip_hash
        ip_hash;
        # 服务器列表
        server 127.0.0.1:8081 weight=5 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8082 weight=5 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8083 weight=5 max_fails=3 fail_timeout=30s backup;
        
        # 健康检查
        keepalive 32;
    }

    # 订单服务配置
    server {
        listen 80;
        server_name order.mall.com;

        # 安全相关头部
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # 访问日志
        access_log /var/log/nginx/order.access.log main;
        error_log /var/log/nginx/order.error.log warn;

        # 静态资源缓存
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 7d;
            add_header Cache-Control "public, no-transform";
        }

        # API接口配置
        location /api/v1/ {
            # 反向代理
            proxy_pass http://order_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # 缓存配置
            proxy_cache order_cache;
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_pragma;
            proxy_cache_revalidate on;

            # 限流配置
            limit_req zone=order_limit burst=20 nodelay;
            limit_req_status 429;

            # 防重复提交
            if ($request_method = POST) {
                set $key $http_x_user_id$request_uri$request_body;
                access_by_lua_block {
                    local redis = require "resty.redis"
                    local red = redis:new()
                    red:set_timeout(1000)
                    local ok, err = red:connect("127.0.0.1", 6379)
                    if not ok then
                        ngx.log(ngx.ERR, "failed to connect: ", err)
                        return
                    end
                    local key = "duplicate:" .. ngx.var.key
                    local exists = red:exists(key)
                    if exists == 1 then
                        ngx.status = 429
                        ngx.say("请求正在处理中，请勿重复提交")
                        ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                    end
                    red:setex(key, 10, 1)
                    red:close()
                }
            }
        }

        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # 限流配置
    limit_req_zone $binary_remote_addr zone=order_limit:10m rate=10r/s;
} 